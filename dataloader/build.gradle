plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'maven-publish'
	id 'com.bmuschko.docker-java-application' version '9.3.4'
}

group = 'com.reserv'
version = '0.0.1-SNAPSHOT'

ext {
	projectname = 'dataloader'
	pulsarVersion = '3.3.4'
	gituser = System.getenv('GIT_USER')
	gittoken = System.getenv('GIT_KEY')
}


java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

configurations.configureEach {
	resolutionStrategy.eachDependency {
		if (it.requested.group == 'org.apache.pulsar') {
			it.useVersion pulsarVersion
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java  // Publish the Java component
			groupId = 'com.reserv'  // Set your group ID
			artifactId = 'dataloader'  // Set your artifact ID
			version = project.version  // Set your version
		}
	}
	repositories {
		maven {
			url = uri("https://maven.pkg.github.com/${gituser}/subledger")  // Use the variable for username
			credentials {
				username = gituser  // Use the variable for username
				password = gittoken  // Use the variable for token
			}
		}
	}
}

docker {
	url = 'unix:///run/docker.sock'

	javaApplication {
		baseImage = 'openjdk:21-slim'
		mainClassName = 'com.reserv.dataloader.DataloaderApplication'
		ports = [8089]

		images = ["ghcr.io/19btech/fyntrac/docker/dataloader:${project.version}"]
	}
}




repositories {
	mavenCentral()  // Central Maven repository
	maven {
		url = uri("https://maven.pkg.github.com/${gituser}/subledger")  // Use an environment variable for username
		credentials {
			username = gituser  // Use the variable for username
			password = gittoken  // Use the variable for token
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-pulsar'
	implementation "org.apache.pulsar:pulsar-client-admin:${pulsarVersion}"
	implementation "org.apache.pulsar:pulsar-common:${pulsarVersion}"
	implementation 'com.fyntrac:commons:0.0.1-SNAPSHOT'
	implementation 'org.apache.poi:poi:5.4.1'
	// implementation 'org.apache.poi:poi-ooxml:5.3.0'
	implementation 'org.apache.poi:poi-ooxml:5.4.1'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'org.apache.commons:commons-csv:1.10.0'
	implementation 'commons-lang:commons-lang:2.6'
	implementation 'joda-time:joda-time:2.12.2'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'colt:colt:1.2.0'
	implementation 'net.spy:spymemcached:2.12.3'
	runtimeOnly 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
}

tasks.named('test') {
	if (project.hasProperty('test.skip') && project.property('test.skip') == 'true') {
		// Include only DataloaderApplicationTests and exclude all others
		include '**/DataloaderApplicationTests.class'
	}
	useJUnitPlatform()

	if (project.hasProperty('testData')) {
		systemProperty 'testData', project.testData
	}

	// Enable debug when system property is passed
	if (project.hasProperty('debugTest')) {
		jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"
	}


}

tasks.register('pushDockerImage') {
	dependsOn dockerBuildImage

	doLast {
		def tag = project.version.toString()
		def imageName = "ghcr.io/19btech/fyntrac/docker/dataloader:${tag}"

		// Docker login using GIT_USER and GIT_KEY
		def gitUser = System.getenv("GIT_USER")
		def gitKey = System.getenv("GIT_KEY")

		if (!gitUser || !gitKey) {
			throw new GradleException("GIT_USER or GIT_KEY environment variables not set")
		}

		def loginProcess = new ProcessBuilder("sh", "-c", "echo ${gitKey} | docker login ghcr.io -u ${gitUser} --password-stdin")
				.redirectErrorStream(true)
				.start()

		loginProcess.inputStream.eachLine { println it }
		if (loginProcess.waitFor() != 0) {
			throw new GradleException("Docker login to GitHub failed")
		}

		// Push the image
		def pushProcess = new ProcessBuilder("docker", "push", imageName)
				.redirectErrorStream(true)
				.start()

		pushProcess.inputStream.eachLine { println it }
		if (pushProcess.waitFor() != 0) {
			throw new GradleException("Failed to push Docker image with tag: ${tag}")
		}
	}
}

