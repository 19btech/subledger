plugins {
	id 'java'
	id 'maven-publish'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.bmuschko.docker-java-application' version '8.1.0'
}

group = 'com.reserv'
version = '0.0.1-SNAPSHOT'
def projectname = 'dataloader'

def gituser = System.getenv('GIT_USER')  // Your GitHub username
def gittoken = System.getenv('GIT_KEY') // Ensure you set this in your environment variables for security


java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java  // Publish the Java component
			groupId = 'com.reserv'  // Set your group ID
			artifactId = 'dataloader'  // Set your artifact ID
			version = project.version  // Set your version
		}
	}
	repositories {
		maven {
			url = uri("https://maven.pkg.github.com/${gituser}/subledger")  // Use the variable for username
			credentials {
				username = gituser  // Use the variable for username
				password = gittoken  // Use the variable for token
			}
		}
	}
}

docker {
	javaApplication {
		baseImage = 'openjdk:21-jdk-alpine'
		mainClassName = 'com.reserv.dataloader.DataloaderApplication' // Corrected property name
		ports = [8089] // Specify any ports your application uses
	}
}

repositories {
	mavenCentral()  // Central Maven repository
	maven {
		url = uri("https://maven.pkg.github.com/${gituser}/subledger")  // Use an environment variable for username
		credentials {
			username = gituser  // Use the variable for username
			password = gittoken  // Use the variable for token
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-pulsar'
	implementation 'com.fyntrac:commons:0.0.1-SNAPSHOT'
	implementation 'org.apache.poi:poi:5.3.0'
	implementation 'org.apache.poi:poi-ooxml:5.3.0'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'org.apache.commons:commons-csv:1.10.0'
	implementation 'commons-lang:commons-lang:2.6'
	implementation 'joda-time:joda-time:2.12.2'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'colt:colt:1.2.0'
	implementation 'net.spy:spymemcached:2.12.3'
	runtimeOnly 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register('pushDockerImage') {
	dependsOn dockerBuildImage // Ensure the image is built before pushing
	doLast {
		def imageName = 'fyntrac/dataloader:0.0.1-snapshot'
		def processBuilder = new ProcessBuilder('docker', 'push', imageName)
		processBuilder.redirectErrorStream(true) // Redirect error stream to output stream
		def process = processBuilder.start()
	}
}