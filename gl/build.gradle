plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'maven-publish'
	id 'com.bmuschko.docker-java-application' version '9.3.4'
}

group = 'com.fyntrac'
version = '0.0.2-SNAPSHOT'

ext {
	projectname = 'gl'
	pulsarVersion = '3.3.4'
	gituser = System.getenv('GIT_USER')
	gittoken = System.getenv('GIT_KEY')
}


java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

configurations.configureEach {
	resolutionStrategy.eachDependency {
		if (it.requested.group == 'org.apache.pulsar') {
			it.useVersion pulsarVersion
		}
	}
}
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java  // Publish the Java component
			groupId = 'com.fyntrac'  // Set your group ID
			artifactId = 'gl'    // Set your artifact ID
			version = project.version  // Set your version

		}
	}
	repositories {
		maven {
			url = uri("https://maven.pkg.github.com/${gituser}/subledger")  // Use an environment variable for username
			credentials {
				username = gituser  // Use the variable for username
				password = gittoken  // Use the variable for token
			}
		}
	}
}

repositories {
	mavenCentral()
	maven {
		url = uri("https://maven.pkg.github.com/${gituser}/subledger")  // Use an environment variable for username
		credentials {
			username = gituser  // Use the variable for username
			password = gittoken  // Use the variable for token
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-pulsar'
	implementation "org.apache.pulsar:pulsar-client-admin:${pulsarVersion}"
	implementation "org.apache.pulsar:pulsar-common:${pulsarVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'net.spy:spymemcached:2.12.3'
    implementation "com.fyntrac:commons:${project.version}"
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'  // Explicit declaration
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'   // Explicit declaration
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

bootJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('test') {
	useJUnitPlatform()
}

docker {
    // url = 'unix:///run/docker.sock'
    url = 'unix:///var/run/docker.sock'

	javaApplication {
		baseImage = 'openjdk:21-slim'
		mainClassName = 'com.fyntrac.gl.GlApplication' // Corrected property name
		ports = [8083] // Specify any ports your application uses

		images = ["ghcr.io/19btech/fyntrac/docker/gl:${project.version}"]
	}
}

// Task to list buildx builders
tasks.register('dockerListBuilders', Exec) {
    commandLine 'docker', 'buildx', 'ls', '--format', '{{.Name}}:{{.Driver}}:{{.Status}}'
    standardOutput = new ByteArrayOutputStream()
    ignoreExitValue = true
    doLast {
        project.ext.dockerListOutput = standardOutput.toString().trim()
    }
}

// Task to remove old builder
tasks.register('dockerRemoveBuilder', Exec) {
    commandLine 'docker', 'buildx', 'rm', 'multiarch'
    ignoreExitValue = true
}

// Task to create new builder
tasks.register('dockerCreateBuilder', Exec) {
    commandLine 'docker', 'buildx', 'create', '--name', 'multiarch', '--driver', 'docker-container', '--use'
}

// Task to select existing builder
tasks.register('dockerUseBuilder', Exec) {
    commandLine 'docker', 'buildx', 'use', 'multiarch'
    ignoreExitValue = true
}

// Task to bootstrap Buildx
tasks.register('dockerBootstrapBuilder', Exec) {
    commandLine 'docker', 'buildx', 'inspect', '--bootstrap'
}

// Main setup task (pure Gradle logic, no exec calls)
tasks.register('setupDockerBuildx') {
    dependsOn 'dockerListBuilders'
    doLast {
        def output = project.ext.dockerListOutput ?: ''
        def hasContainerDriver = output.readLines().any { line ->
            line.contains('docker-container') && line.contains('running')
        }

        if (!hasContainerDriver) {
            logger.lifecycle("ðŸ”§ Creating multi-platform builder with container driver...")
            tasks.named('dockerRemoveBuilder').get().exec()
            tasks.named('dockerCreateBuilder').get().exec()
        } else {
            logger.lifecycle("ðŸ”§ Using existing multi-platform builder...")
            tasks.named('dockerUseBuilder').get().exec()
        }

        tasks.named('dockerBootstrapBuilder').get().exec()
        logger.lifecycle("âœ… Docker Buildx ready for multi-platform builds")
    }
}

tasks.named('dockerBuildImage').configure {
    dependsOn tasks.named('setupDockerBuildx')
    dependsOn tasks.named('clean')
    dependsOn tasks.named('build')

    tasks.named('build').get().mustRunAfter(tasks.named('clean').get())

    // âœ… Correct usage: Map of build args
    buildArgs.set([
            'PLATFORM'   : project.findProperty('platform') ?: 'linux/amd64,linux/arm64',
            'BUILDER'    : 'multiarch',
            'PROVENANCE' : 'false'
    ])
}


// Add this after your docker configuration
tasks.named('dockerPushImage') {
    dependsOn dockerBuildImage

    doFirst {
        def gitUser = System.getenv("GIT_USER")
        def gitKey = System.getenv("GIT_KEY")

        if (!gitUser || !gitKey) {
            throw new GradleException("GIT_USER or GIT_KEY environment variables not set")
        }

        def loginProcess = new ProcessBuilder("sh", "-c", "echo ${gitKey} | docker login ghcr.io -u ${gitUser} --password-stdin")
                .redirectErrorStream(true)
                .start()

        loginProcess.inputStream.eachLine { println it }
        if (loginProcess.waitFor() != 0) {
            throw new GradleException("Docker login to GitHub failed")
        }
    }
}
